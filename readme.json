{
  "title": "Coop Membership Management System",
  "description": "This document outlines the architecture and components for building a cooperative (coop) membership management system.",
  "stack": [
    {
      "name": "Next.js",
      "purpose": "Handles client-side rendering, server-side rendering, and routing (pages and API endpoints)."
    },
    {
      "name": "PostGraphile",
      "purpose": "Auto-generates a GraphQL API from the PostgreSQL schema."
    },
    {
      "name": "Graphile Migrate",
      "purpose": "Manages and versions database schema changes."
    },
    {
      "name": "MUI (Material UI)",
      "purpose": "Provides UI components and theming for Next.js."
    },
    {
      "name": "Playwright",
      "purpose": "End-to-end (E2E) testing of the front end."
    }
  ],
  "overview": {
    "goal": "Develop a web application for cooperative membership management.",
    "member_features": [
      "Create and manage membership profiles",
      "Renew memberships",
      "View membership status",
      "Update personal information (e.g., address, contact details)"
    ],
    "admin_features": [
      "Approve or reject membership applications",
      "Track membership fees",
      "Manage membership tiers or roles (e.g., Member, Admin, etc.)"
    ]
  },
  "objectives": [
    {
      "name": "User Experience",
      "details": "Provide an intuitive interface for both regular members and administrators."
    },
    {
      "name": "Scalability",
      "details": "Use PostGraphile for auto-generated GraphQL and to handle increased membership growth."
    },
    {
      "name": "Maintainability",
      "details": "Use Graphile Migrate for versioned schema changes; follow Next.js best practices."
    },
    {
      "name": "Security",
      "details": "Protect data with secure auth, role-based access, and database-level rules."
    }
  ],
  "architecture": {
    "diagram": [
      "[ Client Browser ]",
      "      |",
      "      v",
      "[ Next.js ]",
      "      |",
      "(Apollo Client or similar)",
      "      |",
      "      v",
      "[ PostGraphile ]",
      "   (GraphQL)",
      "      |",
      "      v",
      "[ PostgreSQL ]"
    ],
    "notes": [
      "Next.js handles rendering & routes.",
      "PostGraphile auto-generates GraphQL from Postgres.",
      "Graphile Migrate handles DB versioning.",
      "MUI for UI components.",
      "Playwright for E2E testing."
    ]
  },
  "data_model": {
    "members": {
      "id": "Primary Key",
      "first_name": "String",
      "last_name": "String",
      "email": "Unique String"
    }
  },
  "initial_database_design": {
    "description": "A starting point for our SQL schema definitions using Graphile Migrate. Below is an example of a minimal table creation for members. (The actual .sql files can be tracked in migrations/.)",
    "sql_examples": [
      {
        "table": "members",
        "snippet": [
          "CREATE TABLE public.members (",
          "  id SERIAL PRIMARY KEY,",
          "  first_name TEXT NOT NULL,",
          "  last_name TEXT NOT NULL,",
          "  email TEXT NOT NULL UNIQUE",
          ");"
        ]
      }
    ]
  },
  "frontend": {
    "routes": [
      {
        "path": "/",
        "description": "Home or dashboard"
      },
      {
        "path": "/login",
        "description": "Login for members/admins"
      },
      {
        "path": "/register",
        "description": "New membership application"
      },
      {
        "path": "/profile",
        "description": "View/Edit member info"
      },
      {
        "path": "/admin",
        "description": "Admin dashboard for approvals, membership management"
      }
    ],
    "mui_usage": [
      "Theme: custom colors, typography",
      "Layout: AppBar, Drawer, Toolbar, Typography, etc.",
      "Forms: TextField, Checkbox, Button",
      "Data Tables: MUI Table for admin lists"
    ]
  },
  "graphql_api": {
    "auto_generated_resolvers": [
      "Queries (e.g., allMembers, memberById)",
      "Mutations (e.g., createMember, updateMember)",
      "RLS-based permission if configured in Postgres"
    ],
    "custom_logic": [
      "Plugins / Smart Comments to tailor PostGraphile",
      "Database Functions / Triggers for advanced logic (if needed)"
    ],
    "auth_and_authz": [
      "JWT or session-based with Next.js routes",
      "RLS in Postgres for row-level security"
    ]
  },
  "migrations": {
    "tool": "Graphile Migrate",
    "workflow": [
      "Write SQL (CREATE TABLE, ALTER TABLE) in .sql files (current.sql while in watch mode).",
      "Store migrations in version control (Git).",
      "Use graphile-migrate watch (dev) and graphile-migrate migrate (prod).",
      "A 'shadow' database may be used by Graphile Migrate to verify safe migrations; we set SHADOW_DATABASE_URL for that.",
      "Configuration files: .gmrc, .gmrc.gha, and .gmrc.neon.js. Each references different connection info (local, GHA, Neon)."
    ]
  },
  "security": {
    "ssl": "Between Next.js and PostGraphile if hosted separately",
    "https": "Use HTTPS in production",
    "role_based": "Postgres roles for queries/mutations",
    "row_level_security": "Protect multi-tenant or user-specific data"
  },
  "testing_and_qa": {
    "tool": "Playwright",
    "tests": [
      "E2E tests for registration, login, renewal, admin actions in a real browser",
      "Integration tests for GraphQL queries/mutations"
    ],
    "cicd": "GitHub Actions or similar for automated test runs"
  },
  "deployment_and_hosting": [
    "Option A: Next.js on Vercel, PostGraphile on Render, Postgres on Neon",
    "Option B: Windows Standalone Deployment (locally on a Windows machine)",
    "Neon Dashboard: https://console.neon.tech/app/projects",
    "GitHub Actions: https://github.com/tng-coop/coop-members/actions"
  ],
  "dev_envs": {
    "primary_dev_on_ubuntu": [
      "Install PostgreSQL (sudo apt-get install postgresql)",
      "Install Node.js (via apt or nvm)",
      "Clone repo & npm install",
      "Set DATABASE_URL environment variable",
      "Run npx graphile-migrate up (migrations)",
      "npm run dev (Next.js), or run-postgraphile.sh"
    ],
    "windows_home_machine": [
      "Install PostgreSQL (Windows installer)",
      "Install Node.js (.exe from nodejs.org)",
      "Clone & install project",
      "Run migrations, start PostGraphile & Next.js, open localhost:<port>"
    ]
  },
  "roadmap_next_steps": [
    "Initialize Repo: Next.js + MUI + PostGraphile + Graphile Migrate",
    "Design DB Schema (members table for now)",
    "Implement Auth: session/JWT, RLS if needed",
    "Build Core Pages: registration, login, profile, admin",
    "Testing: Playwright E2E + integration",
    "Deployment: PaaS or self-host, with CI/CD for migrations/tests"
  ],
  "conclusion": {
    "summary": "Combining Next.js, PostGraphile, Graphile Migrate, MUI, and Playwright yields a modern front end, auto-generated GraphQL, structured DB migrations, robust E2E testing, and flexible deployment.",
    "next_steps": "Implement the minimal members table, integrate PostGraphile in Next.js, build membership features (if/when needed), and set up Playwright."
  },
  "project_file_structure": {
    "root": [
      "README.md",
      "package.json",
      "tsconfig.json (if using TypeScript)",
      ".env (local environment variables)",
      "graphile.config.js (optional config for PostGraphile or Graphile Migrate)"
    ],
    "src": [
      {
        "folder": "pages",
        "description": "Next.js pages and routes (e.g., /index.js, /login.js, etc.)"
      },
      {
        "folder": "components",
        "description": "Reusable React components with MUI styling"
      },
      {
        "folder": "styles",
        "description": "Global CSS or MUI theme configuration"
      },
      {
        "folder": "api",
        "description": "Optional if you embed PostGraphile or custom APIs in Next.js"
      }
    ],
    "migrations": [
      "SQL migration files generated by Graphile Migrate (e.g., 000001.sql, 000002.sql)"
    ],
    "tests": [
      {
        "folder": "playwright",
        "description": "Playwright E2E test specs and configuration"
      }
    ]
  },
  "scripts_and_configs": [
    {
      "filename": "remove-recreate-db.sh",
      "description": "Drops and re-creates the 'coop-members' database and its roles for local, GHA, or Neon. Usage: ./remove-recreate-db.sh [MODE]. When MODE is not provided, it auto-detects (GHA or local)."
    },
    {
      "filename": "migrate.sh",
      "description": "Invokes Graphile Migrate with the appropriate configuration file. Usage: ./migrate.sh [neon|gha|local]. If omitted, defaults to GHA if GITHUB_ACTIONS=true; otherwise, uses .gmrc."
    },
    {
      "filename": "run-postgraphile.sh",
      "description": "Runs PostGraphile locally or in Neon mode. Pass --use-neon or 'neon' to use environment variables for NEON; otherwise, uses local Unix socket defaults. Usage: ./run-postgraphile.sh [--use-neon] [--disable-graphiql]."
    },
    {
      "filename": ".gmrc",
      "description": "Graphile Migrate configuration for local development using Unix sockets and the 'migrator' role."
    },
    {
      "filename": ".gmrc.gha",
      "description": "Graphile Migrate configuration for GitHub Actions (host=127.0.0.1, user=postgres, etc.)."
    },
    {
      "filename": ".gmrc.neon.js",
      "description": "Graphile Migrate configuration for Neon. Pulls credentials from NEON_* environment variables and sets sslmode."
    }
  ]
}
